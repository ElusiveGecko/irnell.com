<?php
/**
 * This class has been auto-generated by PHP-DI.
 */
class CompiledContainer extends DI\CompiledContainer{
    const METHOD_MAPPING = array (
  'Monolog\\Logger' => 'get1',
  'logger' => 'get2',
  'App\\Database\\DB' => 'get3',
  'database' => 'get4',
  'League\\Flysystem\\Filesystem' => 'get5',
  'storage' => 'get6',
  'App\\Web\\Lang' => 'get7',
  'lang' => 'get8',
  'App\\Web\\Session' => 'get9',
  'session' => 'get10',
  'App\\Web\\View' => 'get11',
  'view' => 'get12',
);

    protected function get1()
    {
        return $this->resolveFactory(static function () {
        $logger = new \Monolog\Logger('app');

        $streamHandler = new \Monolog\Handler\RotatingFileHandler(BASE_DIR.'logs/log.txt', 10, \Monolog\Logger::DEBUG);

        $lineFormatter = new \Monolog\Formatter\LineFormatter("[%datetime%] %channel%.%level_name%: %message% %context% %extra%\n", 'Y-m-d H:i:s');
        $lineFormatter->includeStacktraces(true);

        $streamHandler->setFormatter($lineFormatter);

        $logger->pushHandler($streamHandler);

        return $logger;
    }, 'Monolog\\Logger');
    }

    protected function get2()
    {
        return $this->delegateContainer->get('Monolog\\Logger');
    }

    protected function get3()
    {
        return $this->resolveFactory(static function (\Psr\Container\ContainerInterface $container) {
        $config = $container->get('config');

        return new \App\Database\DB(\dsnFromConfig($config), $config['db']['username'], $config['db']['password']);
    }, 'App\\Database\\DB');
    }

    protected function get4()
    {
        return $this->delegateContainer->get('App\\Database\\DB');
    }

    protected function get5()
    {
        return $this->resolveFactory(static function (\Psr\Container\ContainerInterface $container) {
        $config = $container->get('config');
        $driver = $config['storage']['driver'];
        if ($driver === 'local') {
            return new \League\Flysystem\Filesystem(new \League\Flysystem\Adapter\Local($config['storage']['path']));
        } elseif ($driver === 's3') {
            $client = new \Aws\S3\S3Client([
                'credentials' => [
                    'key' => $config['storage']['key'],
                    'secret' => $config['storage']['secret'],
                ],
                'region' => $config['storage']['region'],
                'endpoint' => $config['storage']['endpoint'],
                'version' => 'latest',
                'use_path_style_endpoint' => $config['storage']['use_path_style_endpoint'] ?? false,
                '@http' => ['stream' => true],
            ]);

            $adapter = new \League\Flysystem\AwsS3v3\AwsS3Adapter($client, $config['storage']['bucket'], $config['storage']['path']);
        } elseif ($driver === 'dropbox') {
            $client = new \Spatie\Dropbox\Client($config['storage']['token']);

            $adapter = new \Spatie\FlysystemDropbox\DropboxAdapter($client);
        } elseif ($driver === 'ftp') {
            $adapter = new \League\Flysystem\Adapter\Ftp([
                'host' => $config['storage']['host'],
                'username' => $config['storage']['username'],
                'password' => $config['storage']['password'],
                'port' => $config['storage']['port'],
                'root' => $config['storage']['path'],
                'passive' => $config['storage']['passive'],
                'ssl' => $config['storage']['ssl'],
                'timeout' => 30,
            ]);
        } elseif ($driver === 'google-cloud') {
            $client = new \Google\Cloud\Storage\StorageClient([
                'projectId' => $config['storage']['project_id'],
                'keyFilePath' => $config['storage']['key_path'],
            ]);

            $adapter = new \Superbalist\Flysystem\GoogleStorage\GoogleStorageAdapter($client, $client->bucket($config['storage']['bucket']));
        } elseif ($driver === 'azure') {
            $client = \MicrosoftAzure\Storage\Blob\BlobRestProxy::createBlobService(
                \sprintf(
                    'DefaultEndpointsProtocol=https;AccountName=%s;AccountKey=%s;',
                    $config['storage']['account_name'],
                    $config['storage']['account_key']
                )
            );

            $adapter = new \League\Flysystem\AzureBlobStorage\AzureBlobStorageAdapter($client, $config['storage']['container_name']);
        } else {
            throw new \InvalidArgumentException('The driver specified is not supported.');
        }

        $cache = new \League\Flysystem\Cached\Storage\Adapter(new \League\Flysystem\Adapter\Local(BASE_DIR.'resources/cache/fs'), 'file', 300); // 5min
        return new \League\Flysystem\Filesystem(new \League\Flysystem\Cached\CachedAdapter($adapter, $cache));
    }, 'League\\Flysystem\\Filesystem');
    }

    protected function get6()
    {
        return $this->delegateContainer->get('League\\Flysystem\\Filesystem');
    }

    protected function get7()
    {
        return $this->resolveFactory(static function () {
        return \App\Web\Lang::build(\App\Web\Lang::recognize(), BASE_DIR.'resources/lang/');
    }, 'App\\Web\\Lang');
    }

    protected function get8()
    {
        return $this->delegateContainer->get('App\\Web\\Lang');
    }

    protected function get9()
    {
        return $this->resolveFactory(static function () {
        return new \App\Web\Session('xbackbone_session', BASE_DIR.'resources/sessions');
    }, 'App\\Web\\Session');
    }

    protected function get10()
    {
        return $this->delegateContainer->get('App\\Web\\Session');
    }

    protected function get11()
    {
        return $this->resolveFactory(static function (\Psr\Container\ContainerInterface $container) {
        return \App\Factories\ViewFactory::createAppInstance($container);
    }, 'App\\Web\\View');
    }

    protected function get12()
    {
        return $this->delegateContainer->get('App\\Web\\View');
    }

}
